Private Sub crossmapdata()Dim itargetcol As LongDim strsheet As StringDim ir As LongDim ic As LongFor i = 2 To lastrow("Mapping")
If Len(Sheets("TagList").Cells(4, 1)) < 1 Then Sheets("TagList").Cells(4, 1).Value = " "
    If Len(Sheets("mapping").Cells(i, 5).Value) > 0 And Len(Sheets("mapping").Cells(i, 7).Value) < 1 Then            For ii = 4 To lastrow("Taglist")            If Len(Sheets("TagList").Cells(ii, 1)) > 0 Then                itargetcol = Sheets("mapping").Cells(i, 20).Value                strsheet = Sheets("mapping").Cells(i, 4).Value                ir = Sheets("mapping").Cells(i, 5).Value                ic = Sheets("mapping").Cells(i, 6).Value                Sheets("TagList").Cells(ii, itargetcol).Value = Sheets(strsheet).Cells(ir, ic).Value            Else             Sheets("TagList").Cells(ii, itargetcol).Value = ""            End If        Next    End If
Next iEnd Sub
Private Sub validatesheets()MsgBox 2unLockSheetsApplication.ScreenUpdating = FalseMsgBox 1With ActiveWorkbook.Sheets(1).Shapes("BtnValidate")strvalidate = ValidatesheetSelect Case strvalidateCase 0:        .Select        .Fill.ForeColor.RGB = RGB(0, 255, 0)                        ' fill: green        .Line.BackColor.RGB = RGB(0, 128, 0)                        ' border: light green        .TextFrame.Characters.Font.Color = RGB(0, 0, 0)             ' text: black '       .TextFrame.Characters.Text = "Validate"    Case 1:        .Select        .Fill.ForeColor.RGB = RGB(255, 0, 0)                        ' fill: Red        .Line.BackColor.RGB = RGB(255, 128, 128)                    ' border: light Red        .TextFrame.Characters.Font.Color = RGB(0, 0, 0)             ' text: black'        .TextFrame.Characters.Text = "Validate"Case 2:        .Select        .Fill.ForeColor.RGB = RGB(255, 255, 0)                      ' fill: Yellow        .Line.BackColor.RGB = RGB(255, 255, 204)                    ' border: light yellow        .TextFrame.Characters.Font.Color = RGB(0, 0, 0)             ' text: black '       .TextFrame.Characters.Text = "Validate"End Select    End WithActiveWorkbook.Worksheets(1).SelectCells(3, 4).SelectApplication.ScreenUpdating = TrueLockSheetsEnd Sub
Private Sub unLockSheets()For Each wSheet In Worksheets    wSheet.Unprotect Password:=Sheets("Mapping").Cells(1, 25).ValueNext wSheetEnd Sub
Private Sub LockSheets()For Each wSheet In Worksheets    wSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, Password:=Sheets("Mapping").Cells(1, 25).Value, UserInterFaceOnly:=TrueNext wSheetEnd Sub
Private Sub updatevalbutton()With ActiveSheet.Shapes("BtnValidate")    .Select    .Fill.ForeColor.RGB = RGB(85, 142, 213)                         ' fill: dark blue color    .Line.BackColor.RGB = RGB(198, 217, 241)                        ' border: light blue color    .TextFrame.Characters.Font.Color = RGB(255, 255, 255)    .TextFrame.Characters.Text = "Test"End WithEnd Sub
Private Sub TagNoSelectBox()
    Select Case Sheets("Mapping").Range("z3")    Case 1: RemoveMultipleClassInfo    Case 2: CopyMultipleClassInfo    End SelectEnd Sub
Private Sub CopyMultipleClassInfo()Application.ScreenUpdating = FalseunLockSheets
' GetHeaderLocations
Dim icheck As IntegerDim stranswer As StringDim itaglistrow As IntegerDim strsheet As StringDim imaprow As IntegerDim imapcol As Integer
For i = 1 To 4 ' Changed to 4 this checks the first four columns of row 4 of the Taglist sheet for dataicheck = icheck + Len(Sheets("TagList").Cells(4, i).Value)Next iIf icheck > 1 Then ' icheck will be 1 when there is a space in the top row of the taglist - we want to ignore this as we use this space as a placeholder
    stranswer = MsgBox("There are already values in the first row of the TagList, would you like to overwrite them?", vbYesNoCancel, "Confirm Data Overwrite")
    If stranswer = "6" Then 'VBYES = 6, vbno = 7, vbcancel = 2        With Sheets("Mapping")        For i = 2 To lastrow("Mapping")            If Len(.Cells(i, 7)) > 0 And Len(.Cells(i, 4)) > 0 Then ' check that the attribute is per tag and that it is on the datasheet                itaglistrow = .Cells(i, 20)                strmapsheet = .Cells(i, 4)                imaprow = .Cells(i, 5)                imapcol = .Cells(i, 6)                Sheets("Taglist").Cells(4, itaglistrow) = Sheets(strmapsheet).Cells(imaprow, imapcol)                Sheets(strmapsheet).Cells(imaprow, imapcol) = "See tag List"                Sheets(strmapsheet).Cells(imaprow, imapcol).Interior.ColorIndex = 15                If Sheets(strmapsheet).Cells(imaprow, imapcol).mergecells Then                    Set mergedrange = Sheets(strmapsheet).Cells(imaprow, imapcol).MergeArea                    mergedrange.Locked = True                Else                    Sheets(strmapsheet).Cells(imaprow, imapcol).Locked = True                End If                            End If        Next        End With      Else        If stranswer = "2" Then            Sheets("Mapping").Cells(3, 26).Value = 1            ActiveWorkbook.Worksheets(1).Select            Range("D3").Select            Exit Sub        End If    End IfElse
    With Sheets("Mapping")    For i = 2 To lastrow("Mapping")        If Len(.Cells(i, 7)) > 0 And Len(.Cells(i, 4)) > 0 Then ' check that the attribute is per tag and that it is on the datasheet            itaglistrow = .Cells(i, 20)            strmapsheet = .Cells(i, 4)            imaprow = .Cells(i, 5)            imapcol = .Cells(i, 6)            Sheets("Taglist").Cells(4, itaglistrow) = Sheets(strmapsheet).Cells(imaprow, imapcol)            Sheets(strmapsheet).Cells(imaprow, imapcol) = "See tag List"            Sheets(strmapsheet).Cells(imaprow, imapcol).Interior.ColorIndex = 15            If Sheets(strmapsheet).Cells(imaprow, imapcol).mergecells Then                Set mergedrange = Sheets(strmapsheet).Cells(imaprow, imapcol).MergeArea                mergedrange.Locked = True            Else                Sheets(strmapsheet).Cells(imaprow, imapcol).Locked = True            End If
        End If    Next    End WithEnd If
ActiveWorkbook.Worksheets(1).Select

Range("D3").SelectLockSheetsApplication.ScreenUpdating = True

End Sub
Private Sub RemoveMultipleClassInfo()
Application.ScreenUpdating = False
'to delete extra data from taglist if already compiled'If there is more than one tag on the tag list tell user to delete additional tags before converting to singleIf lastrow("Taglist") - 3 > 1 Then    stranswer = MsgBox("There is more than one tag allocated on the tag list sheet" & vbCr & vbCr & "Clicking OK will delete all data other than the first line." & vbCr & vbCr & "First Line of Data will be imported into this Datasheet", vbOKCancel, "Confirm deletion of multiple tag data")Else    stranswer = MsgBox("Would you like to change the datasheet type to SINGLE? This will import any tag information populated in the TagList Sheet.", vbYesNo, "Confirm Change to Single")End If
If stranswer = "2" Then 'VBYES = 6, vbno = 7, vbcancel = 2, vbok=1    Sheets("Mapping").Cells(3, 26).Value = 2    ActiveWorkbook.Worksheets(1).Select    Range("D3").Select    Exit SubEnd If
If stranswer = "6" Or stranswer = "1" Then  'VBYES = 6, vbno = 7, vbcancel = 2, vbok=1        'add code here to make boxes normal colour, unlocked and clear any text - BUT not if cancel was selected    ' this code reworked to be dynamic based on mapping sheet    With ActiveWorkbook.Sheets("Mapping")    For i = 2 To lastrow("Mapping")        If Len(.Cells(i, 7)) > 0 And Len(.Cells(i, 4)) > 0 Then ' check that the attribute is per tag and that it is on the datasheet            itaglistrow = .Cells(i, 20)            strmapsheet = .Cells(i, 4)            imaprow = .Cells(i, 5)            imapcol = .Cells(i, 6)            Sheets(strmapsheet).Cells(imaprow, imapcol) = Sheets("Taglist").Cells(4, itaglistrow)            Sheets(strmapsheet).Cells(imaprow, imapcol).Interior.ColorIndex = 19            If Sheets(strmapsheet).Cells(imaprow, imapcol).mergecells Then                Set mergedrange = Sheets(strmapsheet).Cells(imaprow, imapcol).MergeArea                mergedrange.Locked = False            Else                Sheets(strmapsheet).Cells(imaprow, imapcol).Locked = False            End If
        End If    Next    End With     End If
If stranswer = "1" Then ' this means there is more than 1 line of data and the operator is happy to delete all but the first line    ActiveWorkbook.Sheets("Taglist").Select
    For i = lastrow("Taglist") To 5 Step -1        Rows(i & ":" & i).Select        Selection.Delete Shift:=xlUp    Next iEnd If
If stranswer = "7" Then    Sheets("Mapping").Cells(3, 26).Value = 2    ActiveWorkbook.Worksheets(1).Select    Range("D3").Select    Exit SubEnd If             ActiveWorkbook.Worksheets(1).SelectCells(3, 4).SelectApplication.ScreenUpdating = True
End Sub
Private Sub CellLockerAllSheets()Cells.Select' unlock all the cellsSelection.Locked = False' next, select the cells (or range) that you want to make read only,' here I used simply A1Range("B3:N12").Select' lock those cellsSelection.Locked = True' now we need to protect the sheet to restrict access to the cells.' I protected only the contents you can add whatever you wantActiveSheet.Protect DrawingObjects:=False, Contents:=True, Scenarios:=FalseEnd Sub
Private Sub PopulateSheetHeaders()
For Each ws In Worksheets    If ws.Name Like "* 1" Then        strpagepref = Left(ws.Name, Len(ws.Name) - 1)        Exit For    End IfNext
For Each ws In Worksheets    If ws.Name Like strpagepref & "*" Then        If Not ws.Name Like strpagepref & "1" Then            Cells.Select            Selection.NumberFormat = "General"            PopulateHdrFormula (ws.Name)            Range("B3:N12").Select            Selection.Locked = True        End If    End IfNext
End Sub
Private Sub Resetsheet()Application.ScreenUpdating = FalseunLockSheetsDim ilastrow As IntegerDim rCell As RangeDim icolor As Integer
For r = 2 To lastrow("library") + 1    With Sheets("mapping")        If Len(.Cells(r, 4)) > 0 Then            Sheets(.Cells(r, 4).Value).Cells(.Cells(r, 5), .Cells(r, 6)).Interior.ColorIndex = 19        End If    End With
Next rActiveWorkbook.Sheets(1).Select
With ActiveSheet.Shapes("BtnValidate")    .Select    .Fill.ForeColor.RGB = RGB(192, 192, 192)                         ' fill: dark blue color    .Line.BackColor.RGB = RGB(128, 128, 128)                        ' border: light blue color    .TextFrame.Characters.Font.Color = RGB(0, 0, 0)End With
With ActiveSheet.Shapes("BtnReset")    .Select    .Fill.ForeColor.RGB = RGB(192, 192, 192)                         ' fill: dark blue color    .Line.BackColor.RGB = RGB(128, 128, 128)                        ' border: light blue color    .TextFrame.Characters.Font.Color = RGB(0, 0, 0)End With
'set backcolor of per tag data    Select Case Sheets("Mapping").Range("z3")    Case 1: icolor = 19    Case Else: icolor = 15    End SelectIf Sheets("Mapping").Cells(3, 26) = 2 Then    With Sheets("Mapping")        For i = 2 To lastrow("Mapping")            If Len(.Cells(i, 7)) > 0 And Len(.Cells(i, 4)) > 0 Then ' check that the attribute is per tag and that it is on the datasheet                itaglistrow = .Cells(i, 20)                strmapsheet = .Cells(i, 4)                imaprow = .Cells(i, 5)                imapcol = .Cells(i, 6)                Sheets(strmapsheet).Cells(imaprow, imapcol) = "See tag List"                Sheets(strmapsheet).Cells(imaprow, imapcol).Interior.ColorIndex = 15                If Sheets(strmapsheet).Cells(imaprow, imapcol).mergecells Then                    Set mergedrange = Sheets(strmapsheet).Cells(imaprow, imapcol).MergeArea                    mergedrange.Locked = True                Else                    Sheets(strmapsheet).Cells(imaprow, imapcol).Locked = True                End If                            End If        Next    End WithEnd If
'Hide Mapping and LibrarySheets("Mapping").Visible = xlSheetVeryHiddenSheets("Library").Visible = xlSheetVeryHidden
ActiveWorkbook.Worksheets(1).SelectCells(3, 4).SelectLockSheetsApplication.ScreenUpdating = TrueEnd Sub
Private Sub Populatetaglist()Dim itaglistrow As IntegerDim strsheet As StringDim imaprow As IntegerDim imapcol As IntegerWith Sheets("Mapping")For i = 2 To lastrow("Mapping")    If Len(.Cells(i, 7)) > 0 And Len(.Cells(i, 4)) > 0 Then ' check that the attribute is per tag and that it is on the datasheet        itaglistrow = .Cells(i, 20)        strmapsheet = .Cells(i, 4)        imaprow = .Cells(i, 5)        imapcol = .Cells(i, 6)        Sheets("Taglist").Cells(4, itaglistrow) = Sheets(strmapsheet).Cells(imaprow, imapcol)    End IfNextEnd WithEnd Sub
Private Sub UnlockFormating()
Sheets("Mapping").Visible = xlSheetVisibleunLockSheets
End Sub
Private Sub LockFormating()
LockSheetsSheets("Mapping").Visible = xlSheetVeryHidden
End Sub
Private Sub BuildTagList()unLockSheetsDim iAttnum As LongDim icol As LongDim icolstart As LongDim srttemp As String' first we will clear the Taglist Form, just in caseclearheaders        Range("A1").Selecticolstart = 1Dim strlastcat As String'first sort the Mapping Sheet - this will put the sheet in order of section then attribute    Sheets("Mapping").Select    Columns("T:T").Select    Selection.ClearContents    Range("A1").Select    Columns("A:S").Select    With Worksheets("Mapping")    .Sort.SortFields.Clear    .Sort.SortFields.Add Key:=Range("K2:K870"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal    .Sort.SortFields.Add Key:=Range("B2:B870"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal    .Sort.SetRange Range("A1:S870")    .Sort.Header = xlYes    .Sort.MatchCase = False    .Sort.Orientation = xlTopToBottom    .Sort.SortMethod = xlPinYin    .Sort.Apply    End WithRange("A1").Select' Now we will map the tagspecific attributes' We will start by putting the first three Attributes in, Tagnumber, Service and Parent Tag.With Sheets("Taglist")    .Cells(3, 1).Value = "TagNumber"    .Cells(3, 2).Value = "Service"    .Cells(3, 3).Value = "ParentTag"    .Cells(3, 1).Interior.ColorIndex = 6    .Cells(3, 2).Interior.ColorIndex = 6    .Cells(3, 3).Interior.ColorIndex = 6    .Cells(2, 1).Interior.ColorIndex = 6    .Cells(2, 2).Interior.ColorIndex = 6    .Cells(2, 3).Interior.ColorIndex = 6    .Cells(2, 1).Value = "Per Tag Data"End With
'walk through the Attributes and assign the Columns in the MappingFor i = 2 To lastrow("Mapping")    Select Case Sheets("Mapping").Cells(i, 3).Value        Case 330000006: Sheets("Mapping").Cells(i, 20).Value = 1        Case 330000004: Sheets("Mapping").Cells(i, 20).Value = 2        Case 330000008: Sheets("Mapping").Cells(i, 20).Value = 3    End SelectNext i
icol = 4 ' this is the current target column - starts at 4 because we already used the first 3' now lets add the other fields which are Tag SpecificFor i = 2 To lastrow("Mapping")    If Len(Sheets("Mapping").Cells(i, 7).Value) > 0 Then ' this is a per tag attribute        If Len(Sheets("Mapping").Cells(i, 6).Value) > 0 Or Len(Sheets("Mapping").Cells(i, 8).Value) = 0 Then ' this is not being ignored ##NOTE we are now using the mapping instead as there are items mapped which should be ignored        If Len(Sheets("Mapping").Cells(i, 20).Value) = 0 Then ' this has not already been allocated            iAttnum = Sheets("Mapping").Cells(i, 3).Value            ' now lets find the attribute in Library            For ii = 2 To lastrow("Library")                If Sheets("Library").Cells(ii, 5).Value = iAttnum Then                    Sheets("Mapping").Cells(i, 20).Value = icol                    Sheets("TagList").Cells(3, icol).Value = Sheets("Library").Cells(ii, 6).Value                    Sheets("TagList").Cells(3, icol).Interior.ColorIndex = 6                    Sheets("Taglist").Select                    Sheets("TagList").Columns(icol).Select                    Sheets("TagList").Columns(icol).EntireColumn.AutoFit                    icol = icol + 1                    'Exit For                End If            Next ii        End If        End If    End IfNext i
mergecells icolstart, icol - 1, 2icolstart = icol
Sheets("TagList").Select'Now lets grab the Mapped itemsFor i = 2 To lastrow("Mapping")    If Len(Sheets("Mapping").Cells(i, 7).Value) = 0 Then ' this is not a per tag attribute        If Len(Sheets("Mapping").Cells(i, 6).Value) > 0 Or Len(Sheets("Mapping").Cells(i, 8).Value) = 0 Then ' this is not being ignored ##NOTE we are now using the mapping instead as there are items mapped which should be ignored        If Len(Sheets("Mapping").Cells(i, 20).Value) = 0 Then ' this has not already been allocated            iAttnum = Sheets("Mapping").Cells(i, 3).Value            ' now lets find the attribute in Library            For ii = 2 To lastrow("Library")                                If Sheets("Library").Cells(ii, 5).Value = iAttnum Then                    With Sheets("Taglist")                    Sheets("Mapping").Cells(i, 20).Value = icol                    .Cells(3, icol).Value = Sheets("Library").Cells(ii, 6).Value                    .Cells(3, icol).Interior.Color = RGB(Sheets("mapping").Cells(i, 14), Sheets("mapping").Cells(i, 15), Sheets("mapping").Cells(i, 16))                    .Cells(3, icol).Font.Color = RGB(Sheets("mapping").Cells(i, 17), Sheets("mapping").Cells(i, 18), Sheets("mapping").Cells(i, 19))                    .Cells(2, icol).Value = Sheets("mapping").Cells(i, 11).Value                    .Cells(2, icol).Interior.Color = .Cells(3, icol).Interior.Color                    .Cells(2, icol).Font.Color = .Cells(3, icol).Font.Color                    .Columns(icol).Select                    .Columns(icol).EntireColumn.AutoFit                    End With                    icol = icol + 1                    'Exit For                End If            Next ii        End If        End If    End IfNext i
'now lets do the merge across the headersstrtemp = Sheets("TagList").Cells(2, icolstart).ValueFor c = icolstart To icol    If Sheets("Taglist").Cells(2, c).Value <> strtemp Then        mergecells icolstart, c - 1, 2        icolstart = c        strtemp = Sheets("Taglist").Cells(2, icolstart).Value
    End IfNext cdrawheaderborders icol
' Put a Header on the whole TagListing PageDim strtext As StringFor i = 1 To 10    strtext = Sheets(1).Cells(1, i).Value    If strtext Like "Data*" Then        Sheets("TagList").Cells(1, 3).Value = "Tag Listing " & Mid(strtext, 10, Len(strtext))        Exit For    End IfNext
' Now populate the dummy data into the sheets for QA
For i = 2 To lastrow("Mapping")    If Len(Sheets("Mapping").Cells(i, 4).Value) > 0 Then ' this is a Mapped Attribute        strsheet = Sheets("mapping").Cells(i, 4).Value        ir = Sheets("mapping").Cells(i, 5).Value        ic = Sheets("mapping").Cells(i, 6).Value        Sheets(strsheet).Cells(ir, ic).Value = Sheets("mapping").Cells(i, 2).Value    End IfNext i
'PopulateSheetHeadersSheets("taglist").SelectRange("A1").SelectLockSheetsEnd Sub
Private Sub mergecells(icol, icol2, irow)
Cells(irow, icol).SelectRange(ActiveCell.Offset(0, 0), ActiveCell.Offset(0, icol2 - icol)).Select    With Selection        .HorizontalAlignment = xlCenter        .VerticalAlignment = xlBottom        .WrapText = False        .Orientation = 0        .AddIndent = False        .IndentLevel = 0        .ShrinkToFit = False        .ReadingOrder = xlContext        .mergecells = False    End With        Application.DisplayAlerts = False    Selection.Merge   Application.DisplayAlerts = TrueEnd Sub
Private Sub prepareforexport()Dim ilastrow As IntegerDim rCell As Range
For r = 2 To lastrow("library")    With Sheets("mapping")        If Len(.Cells(r, 4)) > 0 Then            Sheets(.Cells(r, 4).Value).Cells(.Cells(r, 5), .Cells(r, 6)).Value = ""            Sheets(.Cells(r, 4).Value).Cells(.Cells(r, 5), .Cells(r, 6)).Interior.ColorIndex = 19        End If    End WithNext r
' change the button colour back to the original colourWith ActiveSheet.Shapes("BtnValidate")    .Select    .Fill.ForeColor.RGB = RGB(192, 192, 192)                         ' fill: dark blue color    .Line.BackColor.RGB = RGB(128, 128, 128)                        ' border: light blue color    .TextFrame.Characters.Font.Color = RGB(0, 0, 0)    .TextFrame.Characters.Text = "Validate"End With
' delete the dummy data from the Tag listSheets("Taglist").Selectilastrow = lastrow("TagList")If ilastrow < 5 Then ilastrow = 5Rows("4:" & ilastrow).SelectSelection.ClearContentsCells(1, 1).Select
' now clear the dummy Mapped DataFor i = 2 To lastrow("Mapping")    If Len(Sheets("Mapping").Cells(i, 4).Value) > 0 Then ' this is a Mapped Attribute        strsheet = Sheets("mapping").Cells(i, 4).Value        ir = Sheets("mapping").Cells(i, 5).Value        ic = Sheets("mapping").Cells(i, 6).Value        Sheets(strsheet).Cells(ir, ic).Value = ""    End IfNext i
' hide Mapping and LibraryLockSheetsSheets("Mapping").Visible = xlSheetVeryHiddenSheets("Library").Visible = xlSheetVeryHidden
ActiveWorkbook.Worksheets(1).SelectCells(3, 4).Select
End Sub
Private Sub clearheaders()Sheets("Taglist").SelectRows("2:" & lastrow("TagList")).SelectSelection.ClearContents
    Rows("2:2").Select 'now lets unmerge anything    With Selection        .HorizontalAlignment = xlGeneral        .VerticalAlignment = xlBottom        .WrapText = False        .Orientation = 0        .AddIndent = False        .IndentLevel = 0        .ShrinkToFit = False        .ReadingOrder = xlContext        .mergecells = True    End With    Selection.UnMerge    Rows("2:3").Select    Selection.Borders(xlDiagonalDown).LineStyle = xlNone    Selection.Borders(xlDiagonalUp).LineStyle = xlNone    Selection.Borders(xlEdgeLeft).LineStyle = xlNone    Selection.Borders(xlEdgeTop).LineStyle = xlNone    Selection.Borders(xlEdgeBottom).LineStyle = xlNone    Selection.Borders(xlEdgeRight).LineStyle = xlNone    Selection.Borders(xlInsideVertical).LineStyle = xlNone    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone    With Selection.Interior        .Pattern = xlNone        .TintAndShade = 0        .PatternTintAndShade = 0    End WithEnd Sub
Private Sub Unhidesheets()Sheets("Mapping").Visible = xlSheetVisibleSheets("Library").Visible = xlSheetVisibleEnd Sub
Private Sub PopulateHdrFormula(strsheetname As String)
'Populate sheet headers 1st sectionWith Sheets(strsheetname)    .Cells(3, 4).Value = "=IF(ISBLANK(PrevSheet(D3))," & """""" & ",PrevSheet(D3))"    .Cells(4, 4).Value = "=IF(ISBLANK(PrevSheet(D4))," & """""" & ",PrevSheet(D4))"    .Cells(5, 4).Value = "=IF(ISBLANK(PrevSheet(D5))," & """""" & ",PrevSheet(D5))"    .Cells(6, 4).Value = "=IF(ISBLANK(PrevSheet(D6))," & """""" & ",PrevSheet(D6))"    .Cells(7, 4).Value = "=IF(ISBLANK(PrevSheet(D7))," & """""" & ",PrevSheet(D7))"    .Cells(8, 4).Value = "=IF(ISBLANK(PrevSheet(D8))," & """""" & ",PrevSheet(D8))"    .Cells(9, 4).Value = "=IF(ISBLANK(PrevSheet(D9))," & """""" & ",PrevSheet(D9))"    .Cells(10, 4).Value = "=IF(ISBLANK(PrevSheet(D10))," & """""" & ",PrevSheet(D10))"
'Populate sheet headers 2nd section    .Cells(3, 15).Value = "=IF(ISBLANK(PrevSheet(O3))," & """""" & ",PrevSheet(O3))"    .Cells(4, 15).Value = "=IF(ISBLANK(PrevSheet(O4))," & """""" & ",PrevSheet(O4))"    .Cells(5, 15).Value = "=IF(ISBLANK(PrevSheet(O5))," & """""" & ",PrevSheet(O5))"    .Cells(6, 15).Value = "=IF(ISBLANK(PrevSheet(O6))," & """""" & ",PrevSheet(O6))"    .Cells(7, 15).Value = "=IF(ISBLANK(PrevSheet(O7))," & """""" & ",PrevSheet(O7))"    .Cells(8, 15).Value = "=IF(ISBLANK(PrevSheet(O8))," & """""" & ",PrevSheet(O8))"    .Cells(9, 15).Value = "=IF(ISBLANK(PrevSheet(O9))," & """""" & ",PrevSheet(O9))"    .Cells(10, 15).Value = "=IF(ISBLANK(PrevSheet(O10))," & """""" & ",PrevSheet(O10))"
'Populate sheet headers bottom section    .Cells(11, 4).Value = "=IF(ISBLANK(PrevSheet(D11))," & """""" & ",PrevSheet(D11))"    .Cells(12, 4).Value = "=IF(ISBLANK(PrevSheet(D12))," & """""" & ",PrevSheet(D12))"    .Cells(11, 14).Value = "=IF(ISBLANK(PrevSheet(N11))," & """""" & ",PrevSheet(N11))"    .Cells(12, 14).Value = "=IF(ISBLANK(PrevSheet(N12))," & """""" & ",PrevSheet(N12))"    .Cells(11, 20).Value = "=IF(ISBLANK(PrevSheet(T11))," & """""" & ",PrevSheet(T11))"End WithEnd Sub
Private Sub drawheaderborders(icolumns As Long)    Cells(2, 1).Select    Range(ActiveCell.Offset(0, 0), ActiveCell.Offset(1, icolumns)).Select    Range(ActiveCell.Offset(0, 0), ActiveCell.Offset(1, icolumns)).Activate
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone    Selection.Borders(xlDiagonalUp).LineStyle = xlNone    With Selection.Borders(xlEdgeLeft)        .LineStyle = xlContinuous        .ColorIndex = 0        .TintAndShade = 0        .Weight = xlThin    End With    With Selection.Borders(xlEdgeTop)        .LineStyle = xlContinuous        .ColorIndex = 0        .TintAndShade = 0        .Weight = xlThin    End With    With Selection.Borders(xlEdgeBottom)        .LineStyle = xlContinuous        .ColorIndex = 0        .TintAndShade = 0        .Weight = xlThin    End With    With Selection.Borders(xlEdgeRight)        .LineStyle = xlContinuous        .ColorIndex = 0        .TintAndShade = 0        .Weight = xlThin    End With    With Selection.Borders(xlInsideVertical)        .LineStyle = xlContinuous        .ColorIndex = 0        .TintAndShade = 0        .Weight = xlThin    End With    With Selection.Borders(xlInsideHorizontal)        .LineStyle = xlContinuous        .ColorIndex = 0        .TintAndShade = 0        .Weight = xlThin    End With        Rows("2:2").Select    Selection.Font.Bold = False    Selection.Font.Bold = TrueEnd Sub




